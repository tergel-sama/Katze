import { useState } from "react";
import Markdown from "markdown-to-jsx";
import ResizeTextarea from "react-textarea-autosize";
import {
  Textarea,
  Box,
  Grid,
  Text,
  GridItem,
  FormControl,
  FormLabel,
  Code,
  Divider,
  Kbd,
  Input,
  SimpleGrid,
  Center,
  FormErrorMessage,
  List,
  ListItem,
  ListIcon,
  OrderedList,
  UnorderedList,
  FormHelperText,
  useToast,
  Button,
} from "@chakra-ui/react";
import Mark from "../../components/mark";
export default function PostCreate() {
  const toast = useToast();
  let [content, setContent] = useState(`
# A demo of markdown

üëâ –ß–∞–º–∞–π–≥ –±–∏—á–∏—Ö —è–≤—Ü–∞–¥ ”©”©—Ä—á–ª”©–ª—Ç“Ø“Ø–¥ –≥–∞—Ä—á –∏—Ä–Ω—ç.

üëà –ë–∏—á—ç—ç–¥ “Ø–∑—ç—ç—Ä—ç–π.

ü§ò 2 —É–¥–∞–∞ \`enter\` –¥–∞—Ä–≤–∞–ª —à–∏–Ω—ç –º”©—Ä–Ω”©”©—Å —ç—Ö—ç–ª–Ω—ç. (–ï—Ä –Ω—å –º”©—Ä–Ω“Ø“Ø–¥–∏–π–Ω –¥—É–Ω–¥ —Ö–æ–æ—Å–æ–Ω –∑–∞–π –±–∞–π—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π.)

## –ê–≥—É—É–ª–≥–∞
–ê–≥—É—É–ª–≥–∞ –≥—ç–∂ –±–∏—á–∏—Ö—ç—ç—Ä —à—É—É–¥ —è–∞–∂ –±–∞–π–≥–∞–∞–≥ —Ç–∞ —Ö–∞—Ä–∂ –±–∞–π–Ω–∞. 

## Follows üëá

*  [CommonMark](https://commonmark.org)
*  [GitHub Flavored Markdown](https://github.github.com/gfm/)

## Syntax highlighting

Syntax highlighting —Ö–∏–π—Ö–¥—ç—ç language-–∏–π–Ω –Ω—ç—Ä–∏–π–≥ –±–∏—á—ç—ç—Ä—ç–π.

\`\`\`js
function multiply(num1,num2) {
  let result = num1 * num2;
  return result;
}
\`\`\`
\`\`\`py
# Take a list of numbers
my_list = [12, 65, 54, 39, 102, 339, 221,]

# use anonymous function to filter
result = list(filter(lambda x: (x % 13 == 0), my_list))

# display the result
print("Numbers divisible by 13 are",result)
\`\`\`

## GitHub flavored markdown (GFM)

Github –¥—ç—ç—Ä –±–∏—á–∏–≥–¥—ç–∂ –±–æ–ª–¥–æ–≥ table, check list –≥—ç—Ö –º—ç—Ç markdown –±–∏—á–∏–∂ –±–æ–ª–Ω–æ. 

| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |

~~strikethrough~~

* [ ] task list
* [x] checked item



`);
  let [title, setTitle] = useState("Ritz");
  let [loading, setloading] = useState(false);

  let handleContent = (e) => {
    let inputValue = e.target.value;
    setContent(inputValue);
  };

  let handleTitle = (e) => {
    let inputValue = e.target.value;
    setTitle(inputValue);
  };
  const submitData = async () => {
    setloading(true);
    if (title.length < 1 && content.length < 5) {
      toast({
        title: "–ê–Ω—Ö–∞–∞—Ä.",
        description: "–ì–∞—Ä—á–∏–≥ –±–æ–ª–æ–Ω Ritz —ç—ç –±–∏—á—ç—ç—Ä—ç–π!.",
        status: "warning",
        duration: 9000,
        isClosable: true,
      });
      setloading(false);
      return;
    }

    try {
      const body = { title, content };
      await fetch("/api/ritz/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      })
        .then((result) => result.json())
        .then((result) => {
          setloading(false);
          toast({
            title: "Ritz –•–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞.",
            description: "–î–∞—Ö–∏–∂ Ritz —Ö–∏–π–≥—ç—ç—Ä—ç–π.",
            status: "success",
            duration: 9000,
            isClosable: true,
          });
          console.log(result);
        });
    } catch (error) {
      console.error(error);
    }
  };
  return (
    <>
      <FormControl isRequired>
        <FormLabel htmlFor="email">–ì–∞—Ä—á–∏–≥</FormLabel>
        <Input
          value={title}
          onChange={handleTitle}
          w="350px"
          id="email"
          type="email"
        />
        <FormHelperText>–ì–æ—ë –≥–∞—Ä—á–∏–≥ –±–æ–¥–æ–æ—Ä–æ–π.</FormHelperText>
      </FormControl>
      <FormLabel mt={4}>–ê–≥—É—É–ª–≥–∞ (Ritz)</FormLabel>
      <SimpleGrid columns={2} spacing="40px">
        <FormControl isRequired>
          <Textarea
            as={ResizeTextarea}
            value={content}
            onChange={handleContent}
          />
        </FormControl>
        <Box>
          <Mark>{content}</Mark>
        </Box>
      </SimpleGrid>
      <br />
      <SimpleGrid spacingX="40px" spacingY="20px">
        <Center>
          <Button
            isLoading={loading}
            onClick={submitData}
            loadingText="–•–∞–¥–≥–∞–ª–∂ –±–∞–π–Ω–∞..."
            colorScheme="teal"
            variant="outline"
          >
            –•–∞–¥–≥–∞–ª–∞—Ö
          </Button>
        </Center>
      </SimpleGrid>
      <br />
      <br />
    </>
  );
}
